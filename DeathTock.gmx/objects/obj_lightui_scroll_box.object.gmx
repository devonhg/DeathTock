<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set scroll box defaults
_x = 0;
_y = 0;
_w = 0;
_h = 0;

_pressed = 0;
_scrolled = 0;
_hover = 0;

_scroll_step = 100;
_child_height = 0;
_scroll_sections = 0;
_scroll_sections_visible = 0;
_scroll_step_current = 0;
slider_y = 0;

_x_offset = 0;
_y_offset = 0;

_id = noone;
_parent = noone;

_panels = noone;
_current_panel = 0;

_prev_hover = 0;
_next_hover = 0;

_prev_pressed = 0;
_next_pressed = 0;

_children = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Calculate positioning
_x = _parent._x + _x_offset;
_y = _parent._y + _y_offset;

// Calculate height of children
_child_height = 0;
if(is_array(_children) &amp;&amp; array_length_1d(_children) &gt; 0)
{
    // Get the lowest Y value
    for(i = 0; i &lt; array_length_1d(_children); i++)
    {
        _child_height = max(_child_height, _children[i]._h);
    }
    _scroll_sections = ceil(_child_height / _scroll_step);
    
    // Offset children based on scroll position
    for(i = 0; i &lt; array_length_1d(_children); i++)
    {
        _children[i]._y_offset = 0 - (_scroll_step_current * _scroll_step);
    }
}

_scroll_sections_visible = ceil(_h / _scroll_step);




// Slider handle position
handle_height = sprite_get_height(spr_lightui_scrollbar_handle_vertical);
slider_max_y = _y + _h - handle_height;
slider_min_y = _y;
slider_range = slider_max_y - slider_min_y;
sections_scrollable = _scroll_sections - _scroll_sections_visible;
pixels_per_step = 0;
if(sections_scrollable &gt; 0)
{
    pixels_per_step = slider_range / sections_scrollable;
}
    
// Slider is out of bounds (create)
slider_y = clamp(slider_y, slider_min_y, slider_max_y);

// Move handle when pressed
if(_pressed || _scrolled)
{
    // Move the slider
    if(_pressed)
    {
        slider_y = clamp(mouse_y - (handle_height/2), slider_min_y, slider_max_y);        
    }

    // Not enough sections to scroll
    if(sections_scrollable &lt; 1)
    {
        // Reset slider to the top
        slider_y = slider_min_y;
    }
    
    // Calculate the current step
    _scroll_step_current = floor(sections_scrollable * ((slider_y - slider_min_y) / slider_range));
    
    // Fix lazy scroll behavior
    slider_y = slider_min_y + (_scroll_step_current * pixels_per_step);
    
    // Reset scroll check
    _scrolled = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible)
{
    if(mouse_x &gt;= _x and mouse_x &lt;= _x + _w + sprite_get_width(spr_lightui_scrollbar_handle_vertical))
    {
        if(mouse_y &gt;= _y and mouse_y &lt;= _y + _h)
        {
            slider_y = slider_min_y + ((_scroll_step_current + 1) * pixels_per_step) + 1;
            _scrolled = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible)
{
    if(mouse_x &gt;= _x and mouse_x &lt;= _x + _w + sprite_get_width(spr_lightui_scrollbar_handle_vertical))
    {
        if(mouse_y &gt;= _y and mouse_y &lt;= _y + _h)
        {
            slider_y = slider_min_y + ((_scroll_step_current - 1) * pixels_per_step);
            _scrolled = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Calculate slider percent value
_pressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(visible)
{
    if(mouse_x &gt;= _x + _w and mouse_x &lt;= _x + _w + sprite_get_width(spr_lightui_scrollbar_handle_vertical))
    {
        if(mouse_y &gt;= _y and mouse_y &lt;= _y + _h)
        {
            _pressed = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lightui_draw_sprite_repeat_y(spr_lightui_scrollbar_vertical, 0, _x + _w + 5, _y, slider_max_y - slider_min_y + handle_height, 20);
draw_sprite(spr_lightui_scrollbar_handle_vertical, 0, _x + _w, slider_y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_scroll_step_current--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_scroll_step_current++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
