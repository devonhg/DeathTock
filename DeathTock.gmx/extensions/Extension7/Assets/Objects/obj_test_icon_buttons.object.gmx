<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create the lightui window
with(lightui_create_window(noone, 60, 500, 630, 'ICON  BUTTONS'))
{
    // Create the home button
    lightui_create_icon_button(noone, 585, 27, 'test_icon_button_return', icon_button_demo_callback);

    // Create the panel containers
    // Yes, this is more complicated than just hardcoding
    // a million lightui_create_badge() calls
    with(lightui_create_panel_container())
    {
        // Positioning values
        badges_per_panel = 20;
        badges_total = sprite_get_number(spr_lightui_icon_button);
        panels_total = ceil(badges_total / badges_per_panel);
        index_offset = 0;
        start_x = 30;
        start_y = 30;
        spacing_x = 100;
        spacing_y = 100;
        
        // Loop to create multiple panels
        for(panel = 0; panel &lt; panels_total; panel++)
        {
            // Add a panel to the container
            with(lightui_create_panel())
            {
                // Loop through and add each badgee to the panel
                for(index = 0; index &lt;= clamp(other.badges_total - other.index_offset - 1, 0, 19); index++)
                {
                    // Calculate the x position
                    offset_x = (index % 4) * other.spacing_x;

                    // Calculate the y position
                    offset_y = floor(index / 4) * other.spacing_y;

                    // Create a badge
                    lightui_create_icon_button(other.start_x + offset_x, other.start_y + offset_y, index + other.index_offset, 'test_home', menu_button_demo_callback);
                }
            }
            // Increment the offset
            index_offset += badges_per_panel;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_button_home_instructions, 0, round(display_get_gui_width() / 2) - 285, 700);
draw_sprite(spr_button_more_panel, 0, round(display_get_gui_width() / 2) + 255, 280);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
